plugins {
    id "org.jetbrains.kotlin.multiplatform" version "1.4.21"
    id 'mirego.publish' version '1.0'
}

def iosArchLibrarySuffix = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? "iosarm64" : "iosx64"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    jcenter()
    delegate.miregoPublic()
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')

        final def iOSTarget = iosArchLibrarySuffix == "iosarm64" ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, "ios") {
            binaries {
                framework {
                    embedBitcode("bitcode")
                    baseName = 'Common'
                }
            }
        }
        macosX64('native') {
            binaries {
                framework {
                    embedBitcode("bitcode")
                    baseName = 'Common'
                    isStatic = true
                }
            }
        }
    }

    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
                useExperimentalAnnotation('kotlin.time.ExperimentalTime')
            }
            kotlin {
                srcDir 'src'
                exclude '**/*.java'
            }
        }
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            }
        }
        iosMain {
        }
        nativeMain {
        }
    }
}

task copyFramework() {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"

    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def frameworkFilename = "Common.framework"
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile

        def targetDir = file("build/bin/ios").toString()
        copy {
            from srcFile.parent
            into targetDir
            include "${frameworkFilename}/**"
            include "${frameworkFilename}.dSYM"
        }
        def j2objcTarget = file("../core/generated-objc").toString()
        copy {
            from "${srcFile}/headers"
            into j2objcTarget
            include '**/*.h'
        }
    }
}
task copyFrameworkNative() {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"

    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkNative"

    doLast {
        def frameworkFilename = "Common.framework"
        def srcFile = kotlin.targets.native.binaries.getFramework(buildType).outputFile

        def targetDir = file("build/bin/native").toString()
        copy {
            from srcFile.parent
            into targetDir
            include "${frameworkFilename}/**"
            include "${frameworkFilename}.dSYM"
        }
    }
}

